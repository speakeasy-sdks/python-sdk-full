"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from pg_latest import utils
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FetchSettlementData:
    adjustment: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjustment'), 'exclude': lambda f: f is None }})
    r"""Amount that is adjusted from the settlement amount."""
    amount_settled: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_settled'), 'exclude': lambda f: f is None }})
    r"""Net amount that is settled after deducting the settlement charges and tax. (Settlement charges and tax is applicable for instant and on demand settlements.)"""
    cf_settlement_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cf_settlement_id'), 'exclude': lambda f: f is None }})
    r"""Unique ID to identify the settlement."""
    event_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type'), 'exclude': lambda f: f is None }})
    r"""Event type is SETTLEMENT."""
    payment_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_amount'), 'exclude': lambda f: f is None }})
    r"""Amount captured."""
    payment_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_from'), 'exclude': lambda f: f is None }})
    r"""The start time of time range of settlement."""
    payment_till: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_till'), 'exclude': lambda f: f is None }})
    r"""The end time of time range of settlement"""
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Reason for failure."""
    remarks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remarks'), 'exclude': lambda f: f is None }})
    r"""Remarks on the settlement."""
    service_charge: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_charge'), 'exclude': lambda f: f is None }})
    r"""Service charge applicable on settlement."""
    service_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_tax'), 'exclude': lambda f: f is None }})
    r"""Service tax applicable on settlement."""
    settlement_charge: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_charge'), 'exclude': lambda f: f is None }})
    r"""Settlement tax applicable on settlement."""
    settlement_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_date'), 'exclude': lambda f: f is None }})
    r"""Date and time when the settlement was processed."""
    settlement_initiated_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_initiated_on'), 'exclude': lambda f: f is None }})
    r"""Settlement initiation time."""
    settlement_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_tax'), 'exclude': lambda f: f is None }})
    r"""Settlement charge applicable on settlement."""
    settlement_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_type'), 'exclude': lambda f: f is None }})
    r"""Settlement type."""
    settlement_utr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_utr'), 'exclude': lambda f: f is None }})
    r"""Unique transaction reference number of the payment."""
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the settlement."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FetchSettlement:
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor'), 'exclude': lambda f: f is None }})
    r"""Specify a value from where you want to fetch the settlement details in the API call."""
    data: Optional[List[FetchSettlementData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Specify the number of settlements you want to fetch in the API call."""
    

