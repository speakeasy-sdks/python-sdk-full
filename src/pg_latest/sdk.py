"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .authentication import Authentication
from .eligibility_apis import EligibilityAPIs
from .offers import Offers
from .orders import Orders
from .payment_links import PaymentLinks
from .payments import Payments
from .reconciliation import Reconciliation
from .refunds import Refunds
from .sdkconfiguration import SDKConfiguration
from .settlements import Settlements
from .softpos import SoftPOS
from .token_vault import TokenVault
from pg_latest import utils
from pg_latest._hooks import SDKHooks
from typing import Dict

class PGLatest:
    token_vault: TokenVault
    r"""Cashfree's token Vault helps you save cards and tokenize them in a PCI complaint manner. We support creation of network tokens which can be used across acquiring banks"""
    eligibility_ap_is: EligibilityAPIs
    payment_links: PaymentLinks
    offers: Offers
    orders: Orders
    authentication: Authentication
    r"""The Authentication API allows merchants to show a native screen and capture OTP on their own page and submit to Cashfree. This feature is only available on request."""
    payments: Payments
    refunds: Refunds
    settlements: Settlements
    reconciliation: Reconciliation
    soft_pos: SoftPOS
    r"""softPOS' agent and order management system now supported by APIs"""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, None, server_url, server_idx, retry_config=retry_config)

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration._hooks=hooks
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.token_vault = TokenVault(self.sdk_configuration)
        self.eligibility_ap_is = EligibilityAPIs(self.sdk_configuration)
        self.payment_links = PaymentLinks(self.sdk_configuration)
        self.offers = Offers(self.sdk_configuration)
        self.orders = Orders(self.sdk_configuration)
        self.authentication = Authentication(self.sdk_configuration)
        self.payments = Payments(self.sdk_configuration)
        self.refunds = Refunds(self.sdk_configuration)
        self.settlements = Settlements(self.sdk_configuration)
        self.reconciliation = Reconciliation(self.sdk_configuration)
        self.soft_pos = SoftPOS(self.sdk_configuration)
    